{
  "version": 3,
  "file": "jsongui.js",
  "sources": [
    "src/intro.js",
    "src/jsongui.js",
    "src/menu/menu.js",
    "src/editor/editor.js",
    "src/jtree_json.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA,G;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACtzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A",
  "sourcesContent": [
    "/*! JSON GUI v0.0.1 - JSON Schema -> HTML GUI\n * By Truman Zhou \n * Date: 2016-05-13\n */",
    "var JSONGUI = function(element, schema) {\n\tif (!(element instanceof Element)) {\n\t\tthrow new Error(\"element should be an instance of Element\");\n\t}\n\tthis.element = element;\n\tthis.schema = schema;\n\tthis.init();\n\t\n};\n\nJSONGUI.prototype = {\n\tconstructor : JSONGUI,\n\tinit : function() {\n\t\tconsole.log(\"this called\");\n\t\t\n\t\tvar panel = document.createElement('div');\n\t\tpanel.className = \".container-fluid\";\n\t\t\n\t\t{\n\t\t\tvar menu_container = document.createElement('div');\n\t\t\tmenu_container.id = \"menu_container\";\n\t\t\tmenu_container.className = \"col-sm-3 col-md-2 bs-docs-sidebar\";\n\t\t\tpanel.appendChild(menu_container);\n\t\t\tself.menu = new Menu(this.schema, menu_container);\n\t\t}\n\t\t{\n\t\t\tvar editor_container = document.createElement('div');\n\t \t\teditor_container.id = \"editor_container\";\n\t \t\teditor_container.className = \"col-sm-6 col-md-8 bs-docs-sidebar\";\n\t \t\tpanel.appendChild(editor_container);\n\t \t\tself.editor = new Editor(this.schema, editor_container);\n\t\t}\n \n \n\t\tthis.element.appendChild(panel);\n\t\t\n\t}\n\n};\n",
    "var Menu = function(schema, container) {\n    this.schema = schema;\n    this.container = container;\n\n    this.init();\n};\n\nMenu.prototype = {\n    constructor : Menu,\n    init : function() {\n        this.container.appendChild(this.createJtreeMenu(this.schema));\n\n    },\n\n    createJtreeMenu : function(schema) {\n        var jtree_div = document.createElement(\"div\");\n        var jtree_json = craeteJtreeJson(\"Root\", schema);\n\n        var jstree = $(jtree_div).jstree({\n            \"core\" : {\n                \"themes\" : {\n                    \"stripes\" : true\n                },\n                \"data\" : jtree_json\n            },\n\n            \"plugins\" : [\"contextmenu\"],\n            \"contextmenu\" : {\n                items : this.customMenu\n            }\n\n            // \"plugins\" : [\"contextmenu\", \"search\", \"state\", \"types\", \"wholerow\"]\n\n        });\n\n        $(jtree_div).on(\"changed.jstree\", function(e, data) {\n             console.log(e);\n            console.log(data)\n        });\n\n        var ref = $(jtree_div).jstree(true);\n\n        console.log(ref.get_json());\n\n        var sel = ref.create_node(ref, {\n            \"text\" : \"created\"\n        });\n        if (sel) {\n            ref.edit(sel);\n        }\n\n        $(jtree_div).on('ready.jstree', function() {\n            $(jtree_div).jstree(\"open_all\");\n        });\n        // jstree.create_node(jstree, {\"type\":\"file\"});\n\n        return jtree_div;\n    },\n    \n    customMenu : function(node) {\n        //var tree = $(\"#tree\").jstree(true);\n        return {\n            \"Create\": {\n                \"separator_before\": false,\n                \"separator_after\": false,\n                \"label\": \"Create\",\n                \"action\": function (obj) { \n                    $node = node.create_node($node);\n                    node.edit($node);\n                }\n            },\n            \"Rename\": {\n                \"separator_before\": false,\n                \"separator_after\": false,\n                \"label\": \"Rename\",\n                \"action\": function (obj) { \n                    node.edit($node);\n                }\n            },                         \n            \"Remove\": {\n                \"separator_before\": false,\n                \"separator_after\": false,\n                \"label\": \"Remove\",\n                \"action\": function (obj) { \n                    node.delete_node($node);\n                }\n            }\n        };\n    }\n\n\n}; ",
    "var Editor = function(schema, container) {\n    this.schema = schema;\n    this.container = container;\n\n    this.init();\n};\n\nEditor.prototype = {\n    constructor : Editor,\n    init : function() {\n    \t var jtree_div = createPreDiv(this.schema);\n    \t this.container.appendChild(jtree_div);\n    \t \n    \t \n    },\n    \n    createPreDiv : function(schema) {\n        var txt_div = document.createElement(\"div\");\n        var pre_div = document.createElement(\"pre\");\n        pre_div.innerHTML = JSON.stringify(schema, null, \"   \");\n        txt_div.appendChild(pre_div);\n        return txt_div;\n    }\n\n \n}; ",
    "var craeteJtreeJson = function(name, schema) {\n    var node = null;\n    if (schema.type == \"object\") {\n        console.log(schema);\n        var children_nodes = [];\n        for (var key in schema.properties) {\n            var kid_schema = schema.properties[key];\n            children_nodes.push(craeteJtreeJson(key, kid_schema));\n        }\n        node = {\n            \"text\" : schema.title ? schema.title : schema.id,\n            \"children\" : children_nodes,\n            \"extral_schema\" : schema,\n        };\n    } else {\n        node = {\n            \"text\" : schema.title ? schema.title : name,\n            \"extral_schema\" : schema\n        };\n    }\n    return node;\n};\n"
  ]
}